diff --git a/src/build/build.py b/src/build/build.py
index 78bd1f5..37a259b 100644
--- a/src/build/build.py
+++ b/src/build/build.py
@@ -8,6 +8,8 @@ import sys
 from time import gmtime, strftime
 from src.tools import logger
 
+# Add to build the creation of first user as admin
+
 def interrupt_handler (exception_info):
 	build_logger.debug('Interrupt signal recieved: ' + str(exception_info))
 	build_logger.warning('Stopping installation.')
@@ -212,7 +214,4 @@ def main ():
 	make_c_files()
 	install_data_base()
 	setup_env()
-	install_python_dependencies()
-	
-if __name__ == '__main__':
-	main()
\ No newline at end of file
+	install_python_dependencies()
\ No newline at end of file
diff --git a/src/database_setup/accessControlUser.py b/src/database_setup/accessControlUser.py
index 659e2cb..dae62ea 100644
--- a/src/database_setup/accessControlUser.py
+++ b/src/database_setup/accessControlUser.py
@@ -1,14 +1,6 @@
 import ctypes
 import pymysql.cursors
 
-class acs_print():
-	def __init__ (self, debug_mode=False):
-		self.debug_mode = debug_mode
-	
-	def ENC_print (self, print_str):
-		if self.debug_mode:
-			print ('ENC DEBUG: ' + str(print_str))
-
 # Access control system group
 class acsgroup ():
 	def __init__ (self, number, description):
@@ -16,7 +8,7 @@ class acsgroup ():
 		self.description = description
 
 	def get_number (self):
-		return self.number
+		return int(self.number)
 
 	def get_description (self):
 		return self.description
@@ -80,7 +72,7 @@ class acsaccess ():
 		self.facility_name = facility_name
 
 	def get_group_number (self):
-		return self.group_number
+		return int(self.group_number)
 
 	def get_facility_name (self):
 		return self.facility_name
\ No newline at end of file
diff --git a/src/database_setup/dataBaseDriver.py b/src/database_setup/dataBaseDriver.py
index 701db99..b7635d5 100644
--- a/src/database_setup/dataBaseDriver.py
+++ b/src/database_setup/dataBaseDriver.py
@@ -4,7 +4,7 @@ import logging
 from src.database_setup import accessControlUser
 from src.tools import logger
 
-class mysqlConnector ():
+class mysqlConnector:
 	def __init__ (self, data_base):
 		self.db_logger = logger.acsLogger()
 		self.db_logger.set_warning()
@@ -26,19 +26,22 @@ class mysqlConnector ():
 	# values must be a tuple in the same order as defined in query
 	def execute_query(self, query, values):
 		with self.conn.cursor() as cursor:
-			result = cursor.execute(query, values)
-			if type(result) is int:
-				self.conn.commit()
-				return result
+			try:
+				cursor.execute(query, values)
+			except pymysql.err.InternalError as internal_err:
+				self.db_logger.error (internal_err.args)
+			except TypeError as tperr:
+				self.db_logger.error (tperr.args)
+				return None
 			else:
-				result_return = result.fetchall()
+				query_result = cursor.fetchall()
 				self.conn.commit()
-				return result_return
-	
+				return query_result
+				
 	def __del__ (self):
 		self.conn.close()
 
-class dataBaseDriver ():
+class dataBaseDriver:
 
 	# checks if possible to connect to databse
 	def __init__(self, host, db_owner, password, db_name):
@@ -63,7 +66,7 @@ class dataBaseDriver ():
 
 	# groups must exist before inserting users
 	def define_new_group(self, acsgroup):
-		sql = "INSERT INTO `groups` (`number`,`description`) VALUES (%d,%s)"
+		sql = "INSERT INTO `groups` (`number`,`description`) VALUES (%s,%s)"
 		insert_tuple = (acsgroup.get_number(), acsgroup.get_description())
 		self.db_driver.execute_query(sql, insert_tuple)
 	
@@ -81,21 +84,23 @@ class dataBaseDriver ():
 
 	# link group and facility
 	def give_access(self, acsaccess):
-		sql = "INSERT INTO `access` (`group_number`,`facility_name`) VALUES (%d,%s)"
+		sql = "INSERT INTO `access` (`group_number`,`facility_name`) VALUES (%s,%s)"
 		insert_tuple = (acsaccess.get_group_number(),acsaccess.get_facility_name())
 		self.db_driver.execute_query(sql, insert_tuple)
 	
 	# user info
-	def retrieve_info_from_name (self, name):
-		sql = "SELECT `id`,`name`, `MAC`, `username`,`group_number` FROM `users` WHERE `name`=%s"
-		select_tuple = (name)
-		return self.db_driver.execute_query(sql, select_tuple)
+	def retrieve_info_from_username (self, username):
+		sql = "SELECT `id`,`name`, `MAC`, `username`,`group_number` FROM `users` WHERE `username`=%s"
+		select_tuple = (username)
+		result = self.db_driver.execute_query(sql, select_tuple)
+		return result
 
 	# check access to facilities from MAC
 	def check_access (self, MAC):
 		sql = "SELECT `facility_name` FROM `users`,`access` WHERE `users`.`group_number` = `access`.`group_number` AND `MAC`=%s"
 		select_tuple = (MAC)
-		return self.db_driver.execute_query(sql, select_tuple)
+		result = self.db_driver.execute_query(sql, select_tuple)
+		return result
 
 	# password must be already encrypted (bytes)
 	def add_user_info(self, acsuser):
@@ -105,26 +110,26 @@ class dataBaseDriver ():
 
 	# admin may edit any attribute
 	def edit_user(self, acsuser):
-		sql = "UPDATE `users` SET `id`=%d, `name`=%s, `MAC`=%s, `username`=%s,`password`=%s, group_number=%d where `MAC`=%s)"
+		sql = "UPDATE `users` SET `id`=%d, `name`=%s, `MAC`=%s, `username`=%s,`password`=%s, group_number=%s where `MAC`=%s)"
 		update_tuple = (acsuser.get_id(),acsuser.get_name(), acsuser.get_MAC(), acsuser.get_username(), acsuser.get_encrypted_password(), acsuser.get_group_number())
 		self.db_driver.execute_query(sql, update_tuple)
 
 	# admin can remove access from a group
 	def remove_access(self, acsaccess):
-		sql = "DELETE FROM `access` WHERE `group_number`=%d, `facility_name`=%s"
+		sql = "DELETE FROM `access` WHERE `group_number`=%s, `facility_name`=%s"
 		delete_tuple = (acsaccess.get_group_number(),acsaccess.get_facility_name())
 		self.db_driver.execute_query(sql, delete_tuple)
 
 	# admin can remove group
 	def remove_group(self, acsgroup):
-		sql = "DELETE FROM `groups` WHERE `number`=%d"
+		sql = "DELETE FROM `groups` WHERE `number`=%s"
 		delete_tuple = (acsgroup.get_number())
 		self.db_driver.execute_query(sql, delete_tuple)
 
 	# admin can remove user
 	def remove_user(self, acsuser):
 		sql = "DELETE FROM `users` WHERE `MAC`=%s OR `username=%s`"
-		delete_tuple = (acsuser.get_MAC(),acsuser.get_username)
+		delete_tuple = (acsuser.get_MAC(),acsuser.get_username())
 		self.db_driver.execute_query(sql, delete_tuple)
 
 	# admin can remove facility
@@ -135,12 +140,6 @@ class dataBaseDriver ():
 
 	# change group description
 	def change_group_description(self, acsgroup):
-		sql = "UPDATE `groups` SET `description`=%s where `number`=%d)"
+		sql = "UPDATE `groups` SET `description`=%s where `number`=%s)"
 		update_tuple = (acsgroup.get_description(),acsgroup.get_number())
-		self.db_driver.execute_query(sql, update_tuple)
-
-if __name__ == "__main__":
-	my_db = dataBaseDriver('localhost', 'root', 'jotaquest', 'accontrol')
-	new_user = accessControlUser.acsuser('Gustavo', 'myMACisTHIS', 'gustavob', 'Gatuno4268!', 2)
-	my_db.insert_new_user(new_user)
-	my_db.retrieve_info_from_name('Gustavo')
\ No newline at end of file
+		self.db_driver.execute_query(sql, update_tuple)
\ No newline at end of file
diff --git a/src/interface/interface.py b/src/interface/interface.py
index 73738b4..b0ef964 100644
--- a/src/interface/interface.py
+++ b/src/interface/interface.py
@@ -1,44 +1,69 @@
 # This is an interface for admin
-import logging
+from src.tools import logger
 from src.interface import interpreter
 
-class console_factory ():
+class console_manager:
+
+    class __console_manager:
+        def __init__ (self):
+            pass
+        def __str__ (self):
+            return repr(self)
+
+    instance = None
+
     def __init__ (self):
-        self.number_of_instances = 0
-        self.instance_dict = {}
+        self.logger = logger.acsLogger()
+        self.logger.set_warning()
 
+        if not console_manager.instance:
+            console_manager.instance = console_manager.__console_manager()
+            self.number_of_instances = 1
+            self.instance_dict = {}
+
+        else:
+            self.logger.error ('Only one instance of console manager can be created.')
+            exit(1)
+        
     def get_console (self):
-        self.console = console(self.id)
         self.id = self.number_of_instances
+        self.console = console(self.id, True)
         self.number_of_instances += 1
         self.instance_dict.update({self.id : self.console})
         return self.console
 
+    def list_consoles (self):
+        return self.instance_dict
 
-class console ():
-    def __init__ (self, console_id):
-        self.id = console_id
-        self.create_logger ()
-
-    def create_logger (self):
-	    log_format = "%(asctime)s - %(levelname)s: %(message)s"
-	    date_format = '%d-%m-%Y %H:%M:%S'
-	    logging.basicConfig(level=logging.INFO, format=log_format, datefmt=date_format)
-	    
-    def run (self):
-        try:
-            while (True):
-                command = input ('-->')
-                interpreter.execute(command)
-        except KeyboardInterrupt:
-            logging.info('Console exit.')
-            return 2
+    def deactivate_console (self, console):
+        console.is_active = False
 
+    def destroy_console (self, console):
+        self.deactivate_console(console)
+        to_be_killed_console_id = console.get_id()
+        del self.instance_dict[to_be_killed_console_id]
+        self.logger.warning ('Killing console ' + str(to_be_killed_console_id))
 
+class console:
+    def __init__ (self, console_id, is_active):
+        self.is_active = is_active
+        self.id = console_id
+        self.interpreter = interpreter.interpreter()
+        self.logger = logger.acsLogger()
+        self.logger.set_warning()
 
-def main ():
-    my_console = console_factory.get_console()
-    my_console.run()
+    def get_id (self):
+        return self.id
 
-if __name__ == "__main__":
-    main()
\ No newline at end of file
+    def run (self):
+        if self.is_active:
+            try:
+                while (True):
+                    command = input ('-->')
+                    interpreter.interpreter().execute(command)
+            except KeyboardInterrupt:
+                print ('\n')
+                self.logger.warning('Console exit.')
+                return 2
+        else:
+            self.logger.error('Cannot reach console.')
\ No newline at end of file
diff --git a/src/interface/interpreter.py b/src/interface/interpreter.py
index 59f6375..79c2d98 100644
--- a/src/interface/interpreter.py
+++ b/src/interface/interpreter.py
@@ -1,23 +1,42 @@
 from src.database_setup import dataBaseDriver
+from src.interface import executer
 import re
 
-class interpreter ():
+class interpreter:
     
     def __init__ (self):
-        self.COMMAND_LIST = ['define_new_group', 'insert_new_user', 'insert_new_facility', 'give_access', 'retrieve_info_from_name', 'check_access', 'add_user_info', 'edit_user', 'remove_access', 'remove_facility', 'remove_group', 'remove_user', 'change_group_description', ]
+        self.COMMAND_DICT = {
+            'define_new_group':             ('acsgroup',['number', 'description']), 
+            'insert_new_user':              ('acsuser', ['name', 'MAC', 'username', 'password']),
+            'insert_new_facility':          ('acsfacility', ['name']),
+            'give_access':                  ('acsaccess', ['group_number', 'facility_name']),
+            'retrieve_info_from_username':  ('str', ['username']),
+            'check_access':                 ('str', ['MAC']),
+            'add_user_info':                ('acsuser', ['name', 'username', 'password', 'MAC']),
+            'edit_user':                    ('acsuser', ['id', 'name', 'MAC', 'username', 'password', 'group_number', 'MAC']),
+            'remove_access':                ('acsaccess', ['group_number', 'facility_name']),
+            'remove_group':                 ('acsgroup', ['number']),
+            'remove_user':                  ('acsuser', ['MAC', 'username']),
+            'remove_facility':              ('acsfacility', ['name']),
+            'change_group_description':     ('acsgroup', ['description', 'number'])
+        }
+
+    def get_command_table (self):
+        return self.COMMAND_DICT
 
     def parse_command (self, command):
         command_args = {}
         result = re.match('(.+) *(\(.*\))', command)
         if result is None:
-            return False
+            raise re.error ('PARSER: Invalid command.')
         command_str = result.group(1)
         args = result.group(2)
         if re.match('\( *\)', args):
             return command_str, None
         command_str = command_str.rstrip()
-        if command_str in self.COMMAND_LIST:
-            args_parse = re.match('\(([^,]+)=([^,]+), *(.*)\)$', args)
+        if command_str in self.COMMAND_DICT:
+            args_parse = re.match('\(([^,]+)=([^,]+),* *(.*)\)$', args)
+            last_checked_regexp = ' '
             while args_parse:
                 command_args.update({args_parse.group(1):args_parse.group(2)})
                 last_checked_regexp = args_parse.group(3)
@@ -26,15 +45,18 @@ class interpreter ():
             if last_arg:
                 command_args.update({last_arg.group(1):last_arg.group(2)})
         else:
-            return None, None
-
+            raise re.error ('PARSER: Command does not exist.')
+        std_cmd_arg_type, std_cmd_args = self.COMMAND_DICT[command_str]
+        command_args_as_list = [c for c in command_args.keys()]
+        if not set(command_args_as_list) == set(std_cmd_args):
+            raise re.error ('PARSER: Wrong arguments in command.')
         return command_str, command_args
         
     def execute (self, command):
-        command, args = self.parse_command(command)
-        
-
-if __name__ == "__main__":
-    command = input('-->')
-    my_interpreter = interpreter()
-    my_interpreter.execute(command)
+        command_executer = executer.executer()
+        try:
+            command, args = self.parse_command(command)
+        except re.error as err:
+            print(err.msg)
+        else:
+            command_executer.execute(command, args, self.get_command_table())
\ No newline at end of file
